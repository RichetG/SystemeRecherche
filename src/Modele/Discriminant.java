package Modele;

import java.util.ArrayList;

/**
 * @description Classe Discriminant
 * @author Richet Guillaume - Cadio Mathieu
 * @date 23/12/2015
 *
 */

public class Discriminant {
	
	private ArrayList<String>discriFr;
	private ArrayList<String>discriEn;
	
	/**
	 * Constructeur Discriminant
	 */
	public Discriminant(){
		//connaissance de tous les termes à éviter dans le contenu des items en francais
		discriFr=new ArrayList<String>();
		discriFr.add("au");
		discriFr.add("aux");
		discriFr.add("avec");
		discriFr.add("ce");
		discriFr.add("ces");
		discriFr.add("dans");
		discriFr.add("de");
		discriFr.add("des");
		discriFr.add("du");
		discriFr.add("elle");
		discriFr.add("en");
		discriFr.add("et");
		discriFr.add("eux");
		discriFr.add("il");
		discriFr.add("je");
		discriFr.add("la");
		discriFr.add("le");
		discriFr.add("leur");
		discriFr.add("lui");
		discriFr.add("ma");
		discriFr.add("mais");
		discriFr.add("me");
		discriFr.add("même");
		discriFr.add("mes");
		discriFr.add("moi");
		discriFr.add("mon");
		discriFr.add("ne");
		discriFr.add("nos");
		discriFr.add("notre");
		discriFr.add("nous");
		discriFr.add("on");
		discriFr.add("ou");
		discriFr.add("par");
		discriFr.add("pas");
		discriFr.add("pour");
		discriFr.add("qu");
		discriFr.add("que");
		discriFr.add("qui");
		discriFr.add("sa");
		discriFr.add("se");
		discriFr.add("ses");
		discriFr.add("son");
		discriFr.add("sur");
		discriFr.add("ta");
		discriFr.add("te");
		discriFr.add("tes");
		discriFr.add("toi");
		discriFr.add("ton");
		discriFr.add("tu");
		discriFr.add("un");
		discriFr.add("une");
		discriFr.add("vos");
		discriFr.add("votre");
		discriFr.add("vous");
		discriFr.add("c");
		discriFr.add("d");
		discriFr.add("j");
		discriFr.add("l");
		discriFr.add("à");
		discriFr.add("m");
		discriFr.add("n");
		discriFr.add("s");
		discriFr.add("t");
		discriFr.add("y");
		discriFr.add("été");
		discriFr.add("étée");
		discriFr.add("étées");
		discriFr.add("étés");
		discriFr.add("étant");
		discriFr.add("suis");
		discriFr.add("es");
		discriFr.add("est");
		discriFr.add("sommes");
		discriFr.add("êtes");
		discriFr.add("sont");
		discriFr.add("serai");
		discriFr.add("seras");
		discriFr.add("sera");
		discriFr.add("serons");
		discriFr.add("serez");
		discriFr.add("seront");
		discriFr.add("serais");
		discriFr.add("serait");
		discriFr.add("serions");
		discriFr.add("seriez");
		discriFr.add("seraient");
		discriFr.add("étais");
		discriFr.add("était");
		discriFr.add("étions");
		discriFr.add("étiez");
		discriFr.add("étaient");
		discriFr.add("fus");
		discriFr.add("fut");
		discriFr.add("fûmes");
		discriFr.add("fûtes");
		discriFr.add("furent");
		discriFr.add("sois");
		discriFr.add("soit");
		discriFr.add("soyons");
		discriFr.add("soyez");
		discriFr.add("soient");
		discriFr.add("fusse");
		discriFr.add("fusses");
		discriFr.add("fût");
		discriFr.add("fussions");
		discriFr.add("fussiez");
		discriFr.add("fussent");
		discriFr.add("ayant");
		discriFr.add("eu");
		discriFr.add("eue");
		discriFr.add("eues");
		discriFr.add("eus");
		discriFr.add("ai");
		discriFr.add("as");
		discriFr.add("avons");
		discriFr.add("avez");
		discriFr.add("ont");
		discriFr.add("aurai");
		discriFr.add("auras");
		discriFr.add("aura");
		discriFr.add("auront");
		discriFr.add("aurais");
		discriFr.add("aurait");
		discriFr.add("aurions");
		discriFr.add("auriez");
		discriFr.add("airaient");
		discriFr.add("avais");
		discriFr.add("avait");
		discriFr.add("avions");
		discriFr.add("aviez");
		discriFr.add("avaient");
		discriFr.add("eut");
		discriFr.add("eûmes");
		discriFr.add("eûtes");
		discriFr.add("eurent");
		discriFr.add("aie");
		discriFr.add("ait");
		discriFr.add("ayons");
		discriFr.add("ayez");
		discriFr.add("aient");
		discriFr.add("eusse");
		discriFr.add("eusses");
		discriFr.add("eût");
		discriFr.add("eussions");
		discriFr.add("eussiez");
		discriFr.add("eussent");
		discriFr.add("ceci");
		discriFr.add("cela");
		discriFr.add("celà");
		discriFr.add("cet");
		discriFr.add("cette");
		discriFr.add("ici");
		discriFr.add("ils");
		discriFr.add("les");
		discriFr.add("leurs");
		discriFr.add("quel");
		discriFr.add("quels");
		discriFr.add("quelle");
		discriFr.add("quelles");
		discriFr.add("sans");
		discriFr.add("soi");
		
		//idem mais en anglais
		discriEn=new ArrayList<String>();
		discriEn.add("i");
		discriEn.add("me");
		discriEn.add("my");
		discriEn.add("myself");
		discriEn.add("we");
		discriEn.add("us");
		discriEn.add("our");
		discriEn.add("ours");
		discriEn.add("ourselves");
		discriEn.add("you");
		discriEn.add("your");
		discriEn.add("yours");
		discriEn.add("yourself");
		discriEn.add("yourselves");
		discriEn.add("he");
		discriEn.add("him");
		discriEn.add("his");
		discriEn.add("himself");
		discriEn.add("she");
		discriEn.add("her");
		discriEn.add("hers");
		discriEn.add("herself");
		discriEn.add("it");
		discriEn.add("its");
		discriEn.add("itself");
		discriEn.add("they");
		discriEn.add("them");
		discriEn.add("their");
		discriEn.add("theirs");
		discriEn.add("themelves");
		discriEn.add("what");
		discriEn.add("which");
		discriEn.add("who");
		discriEn.add("whom");
		discriEn.add("this");
		discriEn.add("that");
		discriEn.add("these");
		discriEn.add("those");
		discriEn.add("am");
		discriEn.add("is");
		discriEn.add("are");
		discriEn.add("was");
		discriEn.add("were");
		discriEn.add("be");
		discriEn.add("been");
		discriEn.add("being");
		discriEn.add("have");
		discriEn.add("has");
		discriEn.add("had");
		discriEn.add("having");
		discriEn.add("do");
		discriEn.add("does");
		discriEn.add("did");
		discriEn.add("doing");
		discriEn.add("will");
		discriEn.add("would");
		discriEn.add("shall");
		discriEn.add("should");
		discriEn.add("can");
		discriEn.add("could");
		discriEn.add("may");
		discriEn.add("might");
		discriEn.add("must");
		discriEn.add("ought");
		discriEn.add("i'm");
		discriEn.add("you're");
		discriEn.add("he's");
		discriEn.add("she's");
		discriEn.add("it's");
		discriEn.add("we're");
		discriEn.add("they're");
		discriEn.add("i've");
		discriEn.add("you've");
		discriEn.add("we've");
		discriEn.add("they've");
		discriEn.add("i'd");
		discriEn.add("you'd");
		discriEn.add("he'd");
		discriEn.add("she'd");
		discriEn.add("we'd");
		discriEn.add("they'd");
		discriEn.add("i'll");
		discriEn.add("you'll");
		discriEn.add("he'll");
		discriEn.add("she'll");
		discriEn.add("we'll");
		discriEn.add("they'll");
		discriEn.add("isn't");
		discriEn.add("aren't");
		discriEn.add("wasn't");
		discriEn.add("weren't");
		discriEn.add("hasn't");
		discriEn.add("haven't");
		discriEn.add("hadn't");
		discriEn.add("doesn't");
		discriEn.add("don't");
		discriEn.add("didn't");
		discriEn.add("won't");
		discriEn.add("wouldn't");
		discriEn.add("shan't");
		discriEn.add("shouldn't");
		discriEn.add("can't");
		discriEn.add("cannot");
		discriEn.add("couldn't");
		discriEn.add("mustn't");
		discriEn.add("let's");
		discriEn.add("that's");
		discriEn.add("who's");
		discriEn.add("what's");
		discriEn.add("here's");
		discriEn.add("there's");
		discriEn.add("when's");
		discriEn.add("where's");
		discriEn.add("why's");
		discriEn.add("how's");
		discriEn.add("daren't");
		discriEn.add("needn't");
		discriEn.add("oughtn't");
		discriEn.add("mightn't");
		discriEn.add("a");
		discriEn.add("an");
		discriEn.add("the");
		discriEn.add("and");
		discriEn.add("but");
		discriEn.add("if");
		discriEn.add("or");
		discriEn.add("because");
		discriEn.add("as");
		discriEn.add("until");
		discriEn.add("while");
		discriEn.add("of");
		discriEn.add("at");
		discriEn.add("by");
		discriEn.add("for");
		discriEn.add("with");
		discriEn.add("about");
		discriEn.add("against");
		discriEn.add("between");
		discriEn.add("into");
		discriEn.add("through");
		discriEn.add("during");
		discriEn.add("before");
		discriEn.add("after");
		discriEn.add("above");
		discriEn.add("below");
		discriEn.add("to");
		discriEn.add("from");
		discriEn.add("up");
		discriEn.add("down");
		discriEn.add("in");
		discriEn.add("out");
		discriEn.add("on");
		discriEn.add("off");
		discriEn.add("over");
		discriEn.add("under");
		discriEn.add("again");
		discriEn.add("further");
		discriEn.add("then");
		discriEn.add("once");
		discriEn.add("here");
		discriEn.add("there");
		discriEn.add("when");
		discriEn.add("where");
		discriEn.add("why");
		discriEn.add("how");
		discriEn.add("all");
		discriEn.add("any");
		discriEn.add("both");
		discriEn.add("each");
		discriEn.add("few");
		discriEn.add("more");
		discriEn.add("most");
		discriEn.add("other");
		discriEn.add("some");
		discriEn.add("such");
		discriEn.add("no");
		discriEn.add("nor");
		discriEn.add("not");
		discriEn.add("only");
		discriEn.add("own");
		discriEn.add("same");
		discriEn.add("so");
		discriEn.add("than");
		discriEn.add("too");
		discriEn.add("very");
		discriEn.add("one");
		discriEn.add("every");
		discriEn.add("least");
		discriEn.add("less");
		discriEn.add("many");
		discriEn.add("now");
		discriEn.add("ever");
		discriEn.add("never");
		discriEn.add("say");
		discriEn.add("says");
		discriEn.add("said");
		discriEn.add("also");
		discriEn.add("get");
		discriEn.add("go");
		discriEn.add("goes");
		discriEn.add("just");
		discriEn.add("made");
		discriEn.add("make");
		discriEn.add("put");
		discriEn.add("see");
		discriEn.add("seen");
		discriEn.add("whether");
		discriEn.add("like");
		discriEn.add("well");
		discriEn.add("back");
		discriEn.add("even");
		discriEn.add("still");
		discriEn.add("way");
		discriEn.add("take");
		discriEn.add("since");
		discriEn.add("another");
		discriEn.add("however");
		discriEn.add("two");
		discriEn.add("three");
		discriEn.add("four");
		discriEn.add("five");
		discriEn.add("first");
		discriEn.add("second");
		discriEn.add("new");
		discriEn.add("old");
		discriEn.add("high");
		discriEn.add("long");
	}
	
	/**
	 * Détermination de l'existance du mot dans la liste francaise
	 * @param mot
	 * @return boolean
	 */
	public boolean existFr(String mot){
		boolean test=false;
		for(int i=0; i<discriFr.size();i++){
			if(mot.equals(discriFr.get(i))){
				test=true;
				break;
			}
		}
		return test;
	}
	
	/**
	 * Détermination de l'existance du mot dans la liste anglaise
	 * @param mot
	 * @return boolean
	 */
	public boolean existEn(String mot){
		boolean test=false;
		for(int i=0; i<discriEn.size();i++){
			if(mot.equals(discriEn.get(i))){
				test=true;
				break;
			}
		}
		return test;
	}
}
